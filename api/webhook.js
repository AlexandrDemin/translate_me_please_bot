import OpenAI from 'openai';
import { Anthropic } from '@anthropic-ai/sdk';
import axios from 'axios';
import ffmpeg from 'fluent-ffmpeg';
import { writeFile, unlink } from 'fs/promises';
import { join } from 'path';

// Set ffmpeg path
ffmpeg.setFfmpegPath('./ffmpeg');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_API = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const LOG_CHAT_ID = parseInt(process.env.LOG_CHAT_ID);
const ANTHROPIC_API_KEY = process.env.ANTHROPIC_API_KEY;
const PROVIDER = process.env.PROVIDER || 'anthropic';
const OPENAI_MODEL = process.env.OPENAI_MODEL || "gpt-4-turbo-preview";
const ANTHROPIC_MODEL = process.env.ANTHROPIC_MODEL || "claude-3-5-sonnet-latest";
const START_MESSAGE = process.env.START_MESSAGE || `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.`;

const openai = new OpenAI({
  apiKey: OPENAI_API_KEY,
});

const anthropic = new Anthropic({
  apiKey: ANTHROPIC_API_KEY
});

// Helper functions
async function sendTelegramMessage(chatId, text) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const maxLength = 4096;
  
  if (text.length <= maxLength) {
    await axios.post(url, {
      chat_id: chatId,
      text: text
    });
    
    if (chatId !== LOG_CHAT_ID) {
      await axios.post(url, {
        chat_id: LOG_CHAT_ID,
        text: `ChatId: ${chatId}\nMessage: ${text}`
      });
    }
  } else {
    const parts = text.match(new RegExp('.{1,' + maxLength + '}', 'g'));
    for (const part of parts) {
      await axios.post(url, {
        chat_id: chatId,
        text: part
      });
      
      if (chatId !== LOG_CHAT_ID) {
        await axios.post(url, {
          chat_id: LOG_CHAT_ID,
          text: `ChatId: ${chatId}\nMessage: ${part}`
        });
      }
    }
  }
}

async function sendChatAction(chatId, action) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendChatAction`;
  await axios.post(url, {
    chat_id: chatId,
    action: action
  });
}

async function correctText(text) {
  try {
    const systemMsg = `–í—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –µ–≥–æ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏.

–ü–†–ò–ù–¶–ò–ü–´ –ö–û–†–†–ï–ö–¢–£–†–´:
1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ–ø–µ—á–∞—Ç–∫–∏
- –ü—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
- –ì—Ä—É–±—ã–µ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
- –Ø–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è
- –ù–µ–≤–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–¥–µ–∂–µ–π

2. –°–æ—Ö—Ä–∞–Ω—è—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
- –ü–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ (–µ—Å–ª–∏ –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º)
- –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏
- –ü–æ–≤—Ç–æ—Ä—ã –∏ —Å–∞–º–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ú–µ–∂–¥–æ–º–µ—Ç–∏—è –∏ —Å–ª–æ–≤–∞-–ø–∞—Ä–∞–∑–∏—Ç—ã
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
- –î–∏–∞–ª–µ–∫—Ç–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- –û–±—Ä–∞—â–µ–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã
- –ù–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É

3. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –†–∞–∑–¥–µ–ª—è—Ç—å –Ω–∞ –∞–±–∑–∞—Ü—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞—É–∑–∞—Ö –∏–ª–∏ —è–≤–Ω–æ–π —Å–º–µ–Ω–µ —Ç–µ–º—ã
- –û—Ñ–æ—Ä–º–ª—è—Ç—å –ø—Ä—è–º—É—é —Ä–µ—á—å —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∏—Ä–µ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é (! ...)

4. –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂–∞—Ä–≥–æ–Ω
- –û—Å—Ç–∞–≤–ª—è—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
- –ù–µ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –Ω–æ—Ä–º—ã
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª—é–¥–µ–π
- –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—Å—Ç–µ

–ü–†–ê–í–ò–õ–ê –í–´–í–û–î–ê:
1. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
- –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–ª—É—á—à–µ–Ω–∏–π
- –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—Å—Ç–µ
- –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –¥–∏–∞–ª–æ–≥
- –ù–µ —Ä–∞–∑–±–∏–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø—Ä–∏ –ø—Ä–∞–≤–∫–µ
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —É—Å—Ç–Ω–æ–π —Ä–µ—á–∏
- –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫

3. –ü—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏
- –í—ã–±–∏—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
- –£—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
- –í —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞–∫ –µ—Å—Ç—å

–ö–û–ù–¢–†–û–õ–¨ –ö–ê–ß–ï–°–¢–í–ê:
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
- –û—Ü–µ–Ω–∏–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–≤—É—á–∞–Ω–∏—è
- –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–∞
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
- –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã`
    if (PROVIDER === 'openai') {
      const response = await openai.chat.completions.create({
        model: OPENAI_MODEL,
        messages: [
          {"role": "system", "content": systemMsg},
          {"role": "user", "content": text}
        ],
      });
      const completion = response.choices[0].message.content.trim();
      return completion;
    }

    if (PROVIDER === 'anthropic') {
      const msg = await anthropic.messages.create({
        model: ANTHROPIC_MODEL,
        max_tokens: 4096,
        system: systemMsg,
        messages: [ { role: "user", content: text } ],
      });
      return msg['content'][0]['text']
    }
  } catch (error) {
    await sendTelegramMessage(LOG_CHAT_ID, `Error in correction: ${error}`);
    return 'Correction error occurred';
  }
}

async function translateText(text, targetLang) {
  try {
    const systemMsg = `–í—ã - –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${targetLang}, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–º—ã—Å–ª –∏ –∑–≤—É—á–∏—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –Ω–æ—Å–∏—Ç–µ–ª–µ–π —è–∑—ã–∫–∞.

–û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
1. –¢–æ—á–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–µ—Ç–∞–ª–∏
- –ü—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
- –£—á–∏—Ç—ã–≤–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
- –ù–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏ –Ω–µ —É–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

2. –°—Ç–∏–ª—å –∏ —Ç–æ–Ω
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä —Ä–µ—á–∏
- –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–¥–∏–æ–º—ã –∫ —Ü–µ–ª–µ–≤–æ–π –∫—É–ª—å—Ç—É—Ä–µ
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

3. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—è—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Ç–µ—Ä–º–∏–Ω–æ–≤
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–º–µ–Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
- –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞
- –°–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ ${targetLang}
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏

5. –ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
- –£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –≤ –∫–æ–Ω–Ω–æ—Ç–∞—Ü–∏—è—Ö
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è

–ü–†–ê–í–ò–õ–ê –í–´–í–û–î–ê:
- –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥
- –ù–µ –¥–∞–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
- –ù–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
- –ù–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—Å—Ç–µ
- –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü—Ä–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –≤—ã–±–∏—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –ø–æ —Å–º—ã—Å–ª—É –≤–∞—Ä–∏–∞–Ω—Ç`
    if (PROVIDER === 'openai') {
      const response = await openai.chat.completions.create({
        model: OPENAI_MODEL,
        messages: [
          {"role": "system", "content": systemMsg},
          {"role": "user", "content": text}
        ],
      });
      const completion = response.choices[0].message.content.trim();
      return completion;
    }

    if (PROVIDER === 'anthropic') {
      const msg = await anthropic.messages.create({
        model: ANTHROPIC_MODEL,
        max_tokens: 4096,
        system: systemMsg,
        messages: [ { role: "user", content: text } ],
      });
      return msg['content'][0]['text']
    }
  } catch (error) {
    await sendTelegramMessage(LOG_CHAT_ID, `Error in translation: ${error}`);
    return 'Translation error occurred';
  }
}

function isRussian(text) {
  return /[\u0400-\u04FF]/.test(text);
}

async function sendPhoto(chatId, photoId) {
  await axios.post(`${TELEGRAM_API}/sendPhoto`, {
    chat_id: chatId,
    photo: photoId
  });
}

async function sendVoice(chatId, voiceId) {
  await axios.post(`${TELEGRAM_API}/sendVoice`, {
    chat_id: chatId,
    voice: voiceId
  });
}

async function sendVideo(chatId, videoId) {
  await axios.post(`${TELEGRAM_API}/sendVideo`, {
    chat_id: chatId,
    video: videoId
  });
}

async function sendDocument(chatId, documentId) {
  await axios.post(`${TELEGRAM_API}/sendDocument`, {
    chat_id: chatId,
    document: documentId
  });
}

async function sendAudio(chatId, audioId) {
  await axios.post(`${TELEGRAM_API}/sendAudio`, {
    chat_id: chatId,
    audio: audioId
  });
}

async function sendVideoNote(chatId, videoNoteId) {
  await axios.post(`${TELEGRAM_API}/sendVideoNote`, {
    chat_id: chatId,
    video_note: videoNoteId
  });
}

async function sendSticker(chatId, stickerId) {
  await axios.post(`${TELEGRAM_API}/sendSticker`, {
    chat_id: chatId,
    sticker: stickerId
  });
}

async function sendLocation(chatId, latitude, longitude) {
  await axios.post(`${TELEGRAM_API}/sendLocation`, {
    chat_id: chatId,
    latitude,
    longitude
  });
}

async function sendContact(chatId, phoneNumber, firstName, options = {}) {
  await axios.post(`${TELEGRAM_API}/sendContact`, {
    chat_id: chatId,
    phone_number: phoneNumber,
    first_name: firstName,
    last_name: options.last_name,
    vcard: options.vcard
  });
}

// Voice message handling with OpenAI

async function convertAudio(inputBuffer, fromFormat, toFormat) {
  const inputPath = join('/tmp', `input.${fromFormat}`);
  const outputPath = join('/tmp', `output.${toFormat}`);

  try {
    // Write input buffer to temporary file
    await writeFile(inputPath, inputBuffer);

    // Convert using ffmpeg
    await new Promise((resolve, reject) => {
      ffmpeg()
        .input(inputPath)
        .toFormat(toFormat)
        .on('end', resolve)
        .on('error', reject)
        .save(outputPath);
    });

    // Read the converted file
    const outputBuffer = await readFile(outputPath);

    // Cleanup
    await Promise.all([
      unlink(inputPath),
      unlink(outputPath)
    ]);

    return outputBuffer;
  } catch (error) {
    // Cleanup on error
    try {
      await Promise.all([
        unlink(inputPath).catch(() => {}),
        unlink(outputPath).catch(() => {})
      ]);
    } catch (e) {
      // Ignore cleanup errors
    }
    throw error;
  }
}

async function transcribeFile(audioFile) {
  const transcription = await openai.audio.transcriptions.create({
    file: audioFile,
    model: "whisper-1",
  });
  return transcription.text;
}

function isFormatSupported(mimeType) {
  const supportedFormats = [
    'audio/flac', 
    'audio/m4a',
    'audio/mp3', 
    'audio/mpeg',
    'audio/mpga',
    'audio/oga',
    'audio/ogg',
    'audio/wav',
    'audio/webm',
    'video/mp4',
    'video/webm'
  ];
  return supportedFormats.includes(mimeType);
}

async function getFile(fileId) {
  const response = await axios.get(`${TELEGRAM_API}/getFile?file_id=${fileId}`);
  return `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${response.data.result.file_path}`;
}

async function processVoiceMessage(fileId) {
  const fileUrl = await getFile(fileId);
  const response = await axios.get(fileUrl, { responseType: 'arraybuffer' });
  
  // Create a File object from the audio data
  const audioFile = new File([response.data], 'audio.ogg', { type: 'audio/ogg' });

  return await transcribeFile(audioFile);
}

async function processAudioFile(fileId, mimeType) {
  const fileData = await downloadTelegramFile(fileId);
  
  let audioData = fileData;
  let finalMimeType = mimeType;

  // Convert unsupported formats
  if (!isFormatSupported(mimeType)) {
    const fromFormat = mimeType.split('/')[1];  // e.g., 'opus' from 'audio/opus'
    const toFormat = 'ogg';  // Convert everything to ogg as it's well supported
    
    try {
      audioData = await convertAudio(fileData, fromFormat, toFormat);
      finalMimeType = 'audio/ogg';
    } catch (error) {
      console.error('Conversion error:', error);
      throw new Error(`Failed to convert from ${fromFormat} to ${toFormat}`);
    }
  }

  const extension = finalMimeType.split('/')[1];
  const audioFile = new File([audioData], `audio.${extension}`, { type: finalMimeType });
  
  return await transcribeFile(audioFile);
}

export default async function handler(req, res) {
  if (req.method === 'GET') {
    res.status(200).json({ message: 'Hello' });
    return res;
  }

  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' });
    return res;
  }

  try {
    const { body } = req;
    
    if (!body.message) {
      res.status(200).json({ ok: true });
      return res;
    }

    const msg = body.message;
    const chatId = msg.chat.id;
    let text = msg.text;

    await sendChatAction(chatId, 'typing');
    await sendTelegramMessage(LOG_CHAT_ID, `User: ${JSON.stringify(msg.from,null,2)}`);
    await sendTelegramMessage(LOG_CHAT_ID, `ChatId: ${chatId}`);
    await sendTelegramMessage(LOG_CHAT_ID, `in_text: ${text}`);

    if (msg.voice) {
      const fileId = msg.voice.file_id;
      await sendVoice(LOG_CHAT_ID, fileId);
      await sendChatAction(chatId, 'typing');
      try {
        const transcription = await processVoiceMessage(fileId);
        const correctedTranscription = await correctText(transcription);
        await sendTelegramMessage(chatId, correctedTranscription);
        text = correctedTranscription;
      } catch (error) {
        console.error(error);
        await sendTelegramMessage(chatId, 'Sorry, something went wrong while processing your voice message.');
      }
    }

    if (msg.audio) {
      const fileId = msg.audio.file_id;
      const mimeType = msg.audio.mime_type || 'audio/mpeg'; // default to mp3 if not specified
      
      await sendAudio(LOG_CHAT_ID, fileId);
      await sendChatAction(chatId, 'typing');
      
      try {
        const transcription = await processAudioFile(fileId, mimeType);
        const correctedTranscription = await correctText(transcription);
        await sendTelegramMessage(chatId, correctedTranscription);
        text = correctedTranscription;
      } catch (error) {
        console.error('Audio transcription error:', error, 'Mime type:', mimeType);
        await sendTelegramMessage(chatId, 'Sorry, something went wrong while processing your audio file.');
      }
    }
    
    if (msg.photo) await sendPhoto(LOG_CHAT_ID, msg.photo[msg.photo.length - 1].file_id);
    if (msg.video) await sendVideo(LOG_CHAT_ID, msg.video.file_id);
    if (msg.document) await sendDocument(LOG_CHAT_ID, msg.document.file_id);
    if (msg.video_note) await sendVideoNote(LOG_CHAT_ID, msg.video_note.file_id);
    if (msg.sticker) await sendSticker(LOG_CHAT_ID, msg.sticker.file_id);
    if (msg.location) await sendLocation(LOG_CHAT_ID, msg.location.latitude, msg.location.longitude);
    if (msg.contact) await sendContact(LOG_CHAT_ID, msg.contact.phone_number, msg.contact.first_name, {
      last_name: msg.contact.last_name,
      vcard: msg.contact.vcard
    });
    
    if (text) {
      if (text === '/start') {
        await sendTelegramMessage(chatId, START_MESSAGE);
        res.status(200).json({ ok: true });
        return;
      }

      let directMessageChatId = null;
      let directMessage = null;

      if (chatId === LOG_CHAT_ID && text[0] === '/') {
        let splittedText = text.split(' ');
        directMessageChatId = parseInt(splittedText[0].replace('/', ''));
        directMessage = splittedText.slice(1).join(' ');
      }

      if (!directMessageChatId) {
        if (isRussian(text)) {
          const englishTranslation = await translateText(text, "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π");
          await sendTelegramMessage(chatId, `–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:`);
          await sendTelegramMessage(chatId, englishTranslation);
          
          const indonesianTranslation = await translateText(text, "–∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π");
          await sendTelegramMessage(chatId, `–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–∏–π:`);
          await sendTelegramMessage(chatId, indonesianTranslation);
        } else {
          const russianTranslation = await translateText(text, "—Ä—É—Å—Å–∫–∏–π");
          await sendTelegramMessage(chatId, russianTranslation);
        }
      } else {
        await sendTelegramMessage(directMessageChatId, directMessage);
      }
    } else {
      await sendTelegramMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —è –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    await sendTelegramMessage(LOG_CHAT_ID, `Error in webhook handler: ${error.message}`);
    res.status(200).json({ ok: true });
  }
}